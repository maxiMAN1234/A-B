import os
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from scipy.stats import ks_2samp
import dash
from dash import dcc, html, Input, Output, ALL
import dash_table

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Dash-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = dash.Dash(__name__)

app.layout = html.Div([
    html.H1("–ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞"),
    
    # –ß–∞—Å—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
    html.Label("–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É (CSV –∏–ª–∏ Excel):"),
    dcc.Input(id='file-path', type='text', placeholder='–ü—Ä–∏–º–µ—Ä: C:/Users/User/data.csv', style={'width': '80%'}),
    html.Button("üìÇ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª", id='load-file', n_clicks=0),
    html.Div(id='file-status'),
    
    # –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–≥–æ DataFrame (–≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON)
    dcc.Store(id='stored-df', storage_type='memory'),
    
    html.Hr(),
    
    # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤—ã–ø–∞–¥–∞—é—â–∏–µ —Å–ø–∏—Å–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–æ–ª–æ–Ω–∫–∏
    html.Div(id='dropdown-container'),
    
    html.Hr(),
    
    # –í–≤–æ–¥ –ø—É—Ç–∏ –∫ –ø–∞–ø–∫–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    html.Label("–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤:"),
    dcc.Input(id='save-folder', type='text', placeholder='–ü—Ä–∏–º–µ—Ä: C:/Users/User/Documents', style={'width': '80%'}),
    html.Button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª—ã", id='save-button', n_clicks=0),
    html.Div(id='output')
])

# CALLBACK 1: –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ dcc.Store
@app.callback(
    [Output('file-status', 'children'),
     Output('stored-df', 'data')],
    Input('load-file', 'n_clicks'),
    Input('file-path', 'value')
)
def load_file_callback(n_clicks, file_path):
    if n_clicks == 0:
        return "", None
    if not file_path:
        return "–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É!", None
    if not os.path.exists(file_path):
        return f"‚ùå –§–∞–π–ª '{file_path}' –Ω–µ –Ω–∞–π–¥–µ–Ω!", None
    try:
        if file_path.lower().endswith('.csv'):
            df = pd.read_csv(file_path, index_col=0)
        else:
            df = pd.read_excel(file_path, index_col=0)
        msg = f"‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: {file_path} (—Å—Ç—Ä–æ–∫: {df.shape[0]}, –∫–æ–ª–æ–Ω–æ–∫: {df.shape[1]})"
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º DataFrame –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON (orient='split')
        return msg, df.to_json(date_format='iso', orient='split')
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {str(e)}", None

# CALLBACK 2: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤—ã–ø–∞–¥–∞—é—â–∏—Ö —Å–ø–∏—Å–∫–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∫–æ–ª–æ–Ω–æ–∫ (–Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ DataFrame)
@app.callback(
    Output('dropdown-container', 'children'),
    Input('stored-df', 'data')
)
def generate_dropdowns(data):
    if data is None:
        return ""
    df = pd.read_json(data, orient='split')
    dropdowns = []
    for i, col in enumerate(df.columns):
        dropdowns.append(
            html.Div([
                html.Label(col[:40] + ('...' if len(col) > 40 else '')),
                dcc.Dropdown(
                    id={'type': 'column-dropdown', 'index': i},
                    options=[
                        {'label': '1Ô∏è‚É£ –ß–∏—Å–ª–æ–≤–∞—è', 'value': 1},
                        {'label': '2Ô∏è‚É£ –ë–∏–Ω–∞—Ä–Ω–∞—è', 'value': 2},
                        {'label': '3Ô∏è‚É£ –ö–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω–∞—è', 'value': 3},
                        {'label': '4Ô∏è‚É£ –û—Å—Ç–∞–≤–∏—Ç—å, –Ω–æ –Ω–µ –¥–æ–±–∞–≤–ª—è—Ç—å', 'value': 4},
                        {'label': '5Ô∏è‚É£ –£–¥–∞–ª–∏—Ç—å', 'value': 5},
                    ],
                    value=1,  # –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                )
            ], style={'margin-bottom': '10px'})
        )
    return dropdowns

# CALLBACK 3: –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö (—Å —É—á—ë—Ç–æ–º –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∫–æ–ª–æ–Ω–æ–∫) –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø—É—Ç—å
@app.callback(
    Output('output', 'children'),
    Input('save-button', 'n_clicks'),
    Input('save-folder', 'value'),
    Input({'type': 'column-dropdown', 'index': ALL}, 'value'),
    Input('stored-df', 'data')
)
def process_and_save(n_clicks, save_folder, dropdown_values, data):
    if n_clicks == 0:
        return ""
    if data is None:
        return "–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª!"
    if not save_folder or not os.path.exists(save_folder):
        return "‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è!"
    
    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º DataFrame –∏–∑ JSON
    df = pd.read_json(data, orient='split')
    
    # –°–±–æ—Ä –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ –∫–æ–ª–æ–Ω–∫–∞–º
    numeric_columns = []
    binary_columns = []
    categorial_columns = []
    keep_columns = []
    drop_columns = []
    
    for idx, col in enumerate(df.columns):
        col_type = dropdown_values[idx]
        if col_type == 1:
            numeric_columns.append(col)
        elif col_type == 2:
            binary_columns.append(col)
        elif col_type == 3:
            categorial_columns.append(col)
        elif col_type == 4:
            keep_columns.append(col)
        elif col_type == 5:
            drop_columns.append(col)
    
    # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ LabelEncoder –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
    le = LabelEncoder()
    for col in categorial_columns:
        df[col] = le.fit_transform(df[col].fillna('missing'))
    
    # –ó–∞–º–µ–Ω—è–µ–º –ø—Ä–æ–ø—É—Å–∫–∏ –º–µ–¥–∏–∞–Ω–æ–π –¥–ª—è —á–∏—Å–ª–æ–≤—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
    for col in numeric_columns:
        df[col] = df[col].fillna(df[col].median())
    
    # –î–µ–ª–µ–Ω–∏–µ DataFrame –Ω–∞ –¥–≤–µ –≥—Ä—É–ø–ø—ã —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –æ–¥–Ω–æ—Ä–æ–¥–Ω–æ—Å—Ç–∏ —Å –ø–æ–º–æ—â—å—é KS-—Ç–µ—Å—Ç–∞
    max_attempts = 50
    attempt = 1
    is_homogeneous = False
    df1, df2 = None, None
    results = {}
    
    while attempt < max_attempts and not is_homogeneous:
        df1, df2 = train_test_split(df, test_size=0.3, random_state=attempt)
        is_homogeneous = True  # –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –≥—Ä—É–ø–ø—ã –æ–¥–Ω–æ—Ä–æ–¥–Ω—ã
        results = {}
        for col in numeric_columns:
            stat, p_value = ks_2samp(df1[col], df2[col])
            results[col] = {'KS Statistic': stat, 'p-value': p_value}
            if p_value < 0.5:
                is_homogeneous = False
        attempt += 1

    if is_homogeneous:
        file_A = os.path.join(save_folder, 'A.xlsx')
        file_B = os.path.join(save_folder, 'B.xlsx')
        df1.to_excel(file_A, index=False)
        df2.to_excel(file_B, index=False)
        output = f"‚úÖ –ì—Ä—É–ø–ø—ã –æ–¥–Ω–æ—Ä–æ–¥–Ω—ã! –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫: {attempt}\n"
        output += '\n'.join([f"{col}: KS Statistic = {res['KS Statistic']}, p-value = {res['p-value']}" 
                              for col, res in results.items()])
        output += f"\n–§–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:\nüìÇ {file_A}\nüìÇ {file_B}"
    else:
        output = "‚ùå –ì—Ä—É–ø–ø—ã –Ω–µ –æ–¥–Ω–æ—Ä–æ–¥–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
    
    return output

if __name__ == '__main__':
    app.run_server(debug=True)